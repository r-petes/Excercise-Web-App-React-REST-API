import * as exercises from './exercises_model.mjs';
import express from 'express';

const PORT = 3000;

const app = express();

app.use(express.json());

// TO DO : In case of any error, the response status code must be 500 and the 
// response body must have a JSON object with information about the error. 
// This information can simply be the exception in the code that caused the error.

/**
 * Request:
 * Create a new exercise with the specs provided in the body, 
 * The date property will be in the format MM-DD-YY, e.g., 06-24-21.
 * You can assume that all the properties are valid.
 * The POST request will have no path parameters.
 * Response: 
 * A JSON object with all the properties of the document including the unique ID value generated by MongoDB.
 * The content-type of the response must be set to application/json.
 * The status code must be 201.
 */
app.post('/exercises', (req, res) => {

    exercises.createExercise(req.body.name, req.body.reps, req.body.weight, req.body.unit, req.body.date)
    .then(exercise => {
        res.status(201).json(exercise);
    })
    .catch(error => {
        console.error(error);
        // In case of an error, send back status code 400 in case of an error.
        // A better approach will be to examine the error and send an
        // error status code corresponding to the error.
        res.status(500).json({ Error: 'Request failed' });
    });
    
});


/**
 * No request body and no path parameters.
 * Retrieve the exercises in the collection.
 * Response:
 * A JSON array containing the entire collection.
 * Each document in the collection must be a JSON object with all the properties of the document including the ID.
 * The content-type of the response must be set to application/json.
 * The status code must be 200.
 */
app.get('/exercises/', (req, res) => {
        exercises.findExercises({}, '', 0)
        .then(exercise => { 
            if (exercise !== null) {
                res.json(exercise);
            } else {
                res.status(500).json({ Error: 'Resource not found' });
            }         
         })
        .catch(error => {
            res.status(500).json({ Error: 'Request failed' });
        });
    
});


/**
 * Request
 * The request body will be a JSON object with all the 5 properties listed in the data model.
 * The date property will be in the format MM-DD-YY, e.g., 06-24-21.
 * You can assume that all the properties are valid.
 * The path parameter will contain the ID of a document. You can assume that a document exists with this ID.
 * Response
 * A JSON object with all the properties of the updated document including the ID.
 * The content-type of the response must be set to application/json.
 * The status code must be 200.
 */
app.put('/exercises/:_id', (req, res) => {      

        let name = null
        let reps = null
        let weight = null
        let unit = null
        let date = null
        console.log(req)
        
        if(req.body.name !== undefined) {name = req.body.name}
        if(req.body.reps !== undefined) {reps = req.body.reps}
        if(req.body.weight !== undefined) {weight = req.body.weight}
        if(req.body.unit !== undefined) {unit = req.body.unit}
        if(req.body.date !== undefined) {date = req.body.date}
    
        exercises.replaceExercise(req.params._id, name, reps, weight, unit, date)
            .then(numUpdated => {
                numUpdated === 0
                ? res.send({ error: 'Not Found' })
                : res.json({ _id: req.params._id, name: req.body.name, reps: req.body.reps, weight: req.body.weight, unit: req.body.unit, date: req.body.date  })

           
            })
            .catch(error => {
                console.error(error);
                res.status(500).json({ Error: 'Request failed' });
            });

    
});

/**
 * Request
 * The path parameter will contain the ID of the document. You can assume that a document exists with this ID.
 * The DELETE request will not have a body.
 * Response
 * The status code must be 204.
 */
app.delete('/exercises/:_id', (req, res) => {
    exercises.deleteById(req.params.
        _id)
    .then(deletedCount => {
        if (deletedCount === 1) {
            res.status(204).send();
        } else {
            res.status(500).json({ Error: 'Resource not found' });
        }
    })
    .catch(error => {
        console.error(error);
        res.send({ error: 'Request failed' });
    });
    
});

app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}...`);
});